{"version":3,"sources":["components/Login.tsx","components/Appbar.tsx","components/Result.tsx","components/View.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","Login","users","setIsLoggedIn","setUser","classes","React","useState","usernameValue","setUsernameValue","passwordValue","setPasswordValue","isError","setIsError","handleLoginClick","user","find","each","username","password","handleKeypress","ev","key","preventDefault","Container","className","maxWidth","Grid","item","xs","TextField","fullWidth","label","name","size","variant","onChange","event","currentTarget","value","error","onKeyPress","FormControl","type","aria-describedby","FormHelperText","id","Button","color","onClick","root","flexGrow","menuButton","marginRight","title","correct","wrong","Appbar","time","wordsPerMinute","AppBar","position","Toolbar","Typography","toFixed","table","minWidth","Result","results","length","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","index","scope","completion","TableFooter","colSpan","reduce","total","height","currentWord","textDecorationLine","View","characters","clsx","display","lorem","LoremIpsum","sentencesPerParagraph","max","min","wordsPerSentence","GAME_DURATION","Main","setCharacters","typedCharacters","setTypedCharacters","inputValue","setInputValue","timeLeft","setTimeLeft","timeRef","useRef","newGame","setNewGame","newGameTimer","setNewGameTimer","wordsTyped","setWordsTyped","correctCharacters","setCorrectCharacters","inputRef","inputDisabled","setInputDisabled","errorCount","setErrorCount","gameData","setGameData","saveData","setSaveData","setError","isLoaded","setIsLoaded","isSuccessful","setIsSuccessful","resultsDialogOpen","setResultsDialogOpen","handleChange","useCallback","input","val","currentChar","newCharacters","hasWrong","slice","some","past","correctChars","filter","words","includes","handleResultsDialogClose","useEffect","timer","setTimeout","clearTimeout","current","setInterval","focus","clearInterval","join","duration","fetch","method","body","JSON","stringify","then","res","json","console","log","autoComplete","disabled","autoFocus","paragraph","generateParagraphs","firstWord","Array","from","newParagraph","Dialog","open","DialogContent","onClose","DialogTitle","DialogActions","App","setUsers","isLoggedIn","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cea999ac.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport React from 'react'\r\nimport { User } from '../App'\r\n\r\ntype LoginProps = {\r\n    users: User[]\r\n    setUser: (value: User) => void\r\n    setIsLoggedIn: (value: boolean) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        padding: theme.spacing(3),\r\n    },\r\n}))\r\n\r\nexport const Login: React.FC<LoginProps> = ({ users, setIsLoggedIn, setUser }) => {\r\n    const classes = useStyles()\r\n    const [usernameValue, setUsernameValue] = React.useState<string>('')\r\n    const [passwordValue, setPasswordValue] = React.useState<string>('')\r\n    const [isError, setIsError] = React.useState<boolean>(false)\r\n\r\n    const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUsernameValue(event.currentTarget.value)\r\n    }\r\n    const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordValue(event.currentTarget.value)\r\n    }\r\n    const handleLoginClick = () => {\r\n        const user = users.find(\r\n            (each) => each.username === usernameValue && each.password === passwordValue,\r\n        )\r\n\r\n        if (user) {\r\n            setIsLoggedIn(true)\r\n            setUser(user)\r\n        } else {\r\n            setIsError(true)\r\n        }\r\n    }\r\n\r\n    const handleKeypress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (ev.key === 'Enter') {\r\n            handleLoginClick()\r\n            ev.preventDefault()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.container} maxWidth=\"xs\">\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    WPM Game\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Username\"\r\n                                name=\"username\"\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                onChange={handleUsernameChange}\r\n                                error={isError}\r\n                                onKeyPress={handleKeypress}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <FormControl error={isError} fullWidth>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                    size=\"small\"\r\n                                    type=\"password\"\r\n                                    variant=\"outlined\"\r\n                                    onChange={handlePasswordChange}\r\n                                    error={isError}\r\n                                    aria-describedby=\"component-error-text\"\r\n                                    onKeyPress={handleKeypress}\r\n                                />\r\n                                <FormHelperText id=\"component-error-text\" error={isError}>\r\n                                    {isError ? 'Username and password is invalid.' : ''}\r\n                                </FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        onClick={handleLoginClick}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n","import AppBar from '@material-ui/core/AppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport React from 'react'\r\n\r\nexport interface Character {\r\n    value: string\r\n    display: 'initial' | 'correct' | 'wrong'\r\n}\r\n\r\ntype Appbar = {\r\n    time: number\r\n    wordsPerMinute?: number\r\n    username: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    correct: {\r\n        color: 'green',\r\n    },\r\n    wrong: {\r\n        color: 'red',\r\n    },\r\n}))\r\n\r\nexport const Appbar: React.FC<Appbar> = ({ time, wordsPerMinute, username }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Words Per Minute\r\n                </Typography>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    User: {username}\r\n                </Typography>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    TIme: {time}\r\n                </Typography>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Current WPM: {wordsPerMinute?.toFixed(2)}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableFooter from '@material-ui/core/TableFooter'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport React from 'react'\r\nimport { GameData } from './Main'\r\n\r\ntype ResultProps = {\r\n    results: Partial<GameData>[]\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n})\r\n\r\nexport const Result: React.FC<ResultProps> = ({ results }) => {\r\n    const classes = useStyles()\r\n\r\n    if (results.length === 0) return null\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>&nbsp;</TableCell>\r\n                        <TableCell align=\"right\">WPM</TableCell>\r\n                        <TableCell align=\"right\">Completion</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {results.map((row, index) => (\r\n                        <TableRow key={index}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                Result {index + 1}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.wordsPerMinute?.toFixed(2)}</TableCell>\r\n                            <TableCell align=\"right\">{(row?.completion || 0) * 100}%</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableCell align=\"right\" colSpan={2}>\r\n                        Average WPM\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {results.reduce((total, each) => total + (each?.wordsPerMinute || 0), 0) /\r\n                            results.length}\r\n                    </TableCell>\r\n                </TableFooter>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n","import Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport clsx from 'clsx'\r\nimport React from 'react'\r\nimport { Character } from './Main'\r\n\r\ntype ViewProps = {\r\n    characters: Character[]\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        padding: theme.spacing(2),\r\n        height: 100,\r\n    },\r\n    correct: {\r\n        color: 'green',\r\n    },\r\n    wrong: {\r\n        color: 'red',\r\n    },\r\n    currentWord: {\r\n        textDecorationLine: 'underline',\r\n    },\r\n}))\r\n\r\nexport const View: React.FC<ViewProps> = ({ characters }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Grid item className={classes.container} xs={12}>\r\n            {characters.map((value, index) => (\r\n                <Typography\r\n                    key={index}\r\n                    component=\"span\"\r\n                    className={clsx(\r\n                        value.display === 'wrong' && classes.wrong,\r\n                        value.display === 'correct' && classes.correct,\r\n                        value.currentWord && classes.currentWord,\r\n                    )}\r\n                >\r\n                    {value.value}\r\n                </Typography>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n","import Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { LoremIpsum } from 'lorem-ipsum'\r\nimport React from 'react'\r\nimport { User } from '../App'\r\nimport { Appbar } from './Appbar'\r\nimport { Result } from './Result'\r\nimport { View } from './View'\r\n\r\ntype MainProps = {\r\n    user?: User\r\n}\r\n\r\nexport interface Character {\r\n    value: string\r\n    display: 'initial' | 'correct' | 'wrong'\r\n    currentWord: boolean\r\n}\r\n\r\nexport interface GameData {\r\n    characters: string\r\n    typedCharacters: string\r\n    timeLeft: number\r\n    wordsTyped: number\r\n    correctCharacters: number\r\n    errorCount: number\r\n    wordsPerMinute: number\r\n    completion: number\r\n    duration: number\r\n}\r\n\r\nconst lorem = new LoremIpsum({\r\n    sentencesPerParagraph: {\r\n        max: 7,\r\n        min: 6,\r\n    },\r\n    wordsPerSentence: {\r\n        max: 7,\r\n        min: 6,\r\n    },\r\n})\r\n\r\nexport const GAME_DURATION = 10\r\nexport const START_TIMER = 3\r\n\r\nexport const Main: React.FC<MainProps> = ({ user }) => {\r\n    const [characters, setCharacters] = React.useState<Character[]>([])\r\n    const [typedCharacters, setTypedCharacters] = React.useState<string>('')\r\n    const [inputValue, setInputValue] = React.useState<string>('')\r\n    const [timeLeft, setTimeLeft] = React.useState<number>(GAME_DURATION)\r\n    const timeRef = React.useRef<any>(null)\r\n    const [newGame, setNewGame] = React.useState<boolean>(false)\r\n    const [newGameTimer, setNewGameTimer] = React.useState<number>(0)\r\n    const [wordsTyped, setWordsTyped] = React.useState<number>(0)\r\n    const [correctCharacters, setCorrectCharacters] = React.useState<number>(0)\r\n    const inputRef = React.useRef<HTMLInputElement>(null)\r\n    const [inputDisabled, setInputDisabled] = React.useState<boolean>(true)\r\n    const [errorCount, setErrorCount] = React.useState<number>(0)\r\n    const [gameData, setGameData] = React.useState<Partial<GameData>[]>([])\r\n    const [saveData, setSaveData] = React.useState<boolean>(false)\r\n    const [error, setError] = React.useState(null)\r\n    const [isLoaded, setIsLoaded] = React.useState<boolean>(false)\r\n    const [isSuccessful, setIsSuccessful] = React.useState<boolean>(false)\r\n\r\n    const [resultsDialogOpen, setResultsDialogOpen] = React.useState<boolean>(false)\r\n\r\n    const wordsPerMinute =\r\n        timeLeft !== GAME_DURATION\r\n            ? wordsTyped / ((GAME_DURATION - timeLeft) / 60)\r\n            : wordsTyped / (GAME_DURATION / 60)\r\n\r\n    const handleChange = React.useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const input = event.currentTarget.value\r\n            const val = typedCharacters + input\r\n            const currentChar = val.length - 1\r\n\r\n            // check for backspace action which empties input\r\n            if (input.length === 0 && typedCharacters.length > 0 && inputValue.length === 0) {\r\n                return\r\n            }\r\n\r\n            let newCharacters = [...characters]\r\n            let hasWrong = characters.slice(0, currentChar).some((each) => each.display === 'wrong')\r\n\r\n            // at the start of paragraph\r\n            if (currentChar < 0) {\r\n                newCharacters = characters.map((each) => {\r\n                    return {\r\n                        ...each,\r\n                        display: 'initial',\r\n                    }\r\n                })\r\n            } else {\r\n                // latest character is not equal\r\n                if (val[currentChar] !== characters[currentChar].value || hasWrong) {\r\n                    setErrorCount((past) => past + 1)\r\n                    hasWrong = true\r\n                    newCharacters = characters.map((each, index) => {\r\n                        if (currentChar <= index) {\r\n                            return {\r\n                                ...each,\r\n                                display: 'wrong',\r\n                            }\r\n                        }\r\n                        return each\r\n                    })\r\n                } else {\r\n                    // all is true\r\n\r\n                    let currentWord = true\r\n                    newCharacters = characters.map((each, index) => {\r\n                        if (val[currentChar] === ' ') {\r\n                            // all correct before current index\r\n                            if (currentChar >= index) {\r\n                                return {\r\n                                    ...each,\r\n                                    display: 'correct',\r\n                                    currentWord: false,\r\n                                }\r\n                            } else {\r\n                                // not part of word if space\r\n                                if (each.value === ' ' && currentWord) {\r\n                                    currentWord = false\r\n                                }\r\n\r\n                                return {\r\n                                    ...each,\r\n                                    display: 'initial',\r\n                                    currentWord,\r\n                                }\r\n                            }\r\n                        }\r\n                        if (currentChar >= index) {\r\n                            return {\r\n                                ...each,\r\n                                display: 'correct',\r\n                            }\r\n                        }\r\n                        return {\r\n                            ...each,\r\n                            display: 'initial',\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n\r\n            // GROSS WPM FORMULA\r\n            const correctChars = newCharacters.filter((each) => each.display === 'correct').length\r\n\r\n            const words = correctChars / 5\r\n\r\n            setCorrectCharacters(correctChars)\r\n            setWordsTyped(words)\r\n\r\n            setCharacters(newCharacters)\r\n            if (input.includes(' ') && !hasWrong) {\r\n                setInputValue('')\r\n                setTypedCharacters(val)\r\n            } else {\r\n                setInputValue(input)\r\n            }\r\n        },\r\n        [characters, typedCharacters, inputValue],\r\n    )\r\n\r\n    const newParagraph = () => {\r\n        const paragraph = lorem.generateParagraphs(1) // 'test test'\r\n        let firstWord = true\r\n        const characters: Character[] = Array.from(paragraph).map((each) => {\r\n            if (each === ' ' && firstWord) {\r\n                firstWord = false\r\n            }\r\n            return {\r\n                value: each,\r\n                display: 'initial',\r\n                currentWord: firstWord,\r\n            }\r\n        })\r\n\r\n        setCharacters(characters)\r\n        setTypedCharacters('')\r\n\r\n        setCorrectCharacters(0)\r\n        setInputValue('')\r\n    }\r\n\r\n    const newGameClick = () => {\r\n        setNewGameTimer(START_TIMER)\r\n        setTimeLeft(GAME_DURATION)\r\n        setErrorCount(0)\r\n        setNewGame(true)\r\n        newParagraph()\r\n        setInputDisabled(false)\r\n        clearInterval(timeRef.current)\r\n    }\r\n\r\n    const handleResultsDialogClose = () => {\r\n        setResultsDialogOpen(false)\r\n    }\r\n\r\n    // New Game Timer\r\n    React.useEffect(() => {\r\n        if (newGameTimer > 0) {\r\n            const timer = setTimeout(() => {\r\n                setNewGameTimer(newGameTimer - 1)\r\n            }, 1000)\r\n            return () => clearTimeout(timer)\r\n        }\r\n\r\n        if (newGameTimer === 0 && newGame) {\r\n            setNewGame(false)\r\n            timeRef.current = setInterval(() => {\r\n                setTimeLeft((past) => past - 1)\r\n            }, 1000)\r\n            inputRef.current?.focus()\r\n        }\r\n    }, [newGameTimer, newGame, inputRef])\r\n\r\n    React.useEffect(() => {\r\n        if (\r\n            timeLeft === 0 ||\r\n            (characters.length === correctCharacters && timeLeft !== GAME_DURATION)\r\n        ) {\r\n            clearInterval(timeRef.current)\r\n            setInputDisabled(true)\r\n            setInputValue('')\r\n            setWordsTyped(0)\r\n            setTimeLeft(GAME_DURATION)\r\n            setGameData([\r\n                ...gameData,\r\n                {\r\n                    timeLeft,\r\n                    errorCount,\r\n                    wordsTyped,\r\n                    correctCharacters,\r\n                    characters: characters.map((each) => each.value).join(''),\r\n                    typedCharacters,\r\n                    wordsPerMinute:\r\n                        timeLeft !== GAME_DURATION\r\n                            ? wordsTyped / ((GAME_DURATION - timeLeft) / 60)\r\n                            : wordsTyped / (GAME_DURATION / 60),\r\n                    completion: correctCharacters / characters.length,\r\n                    duration: GAME_DURATION,\r\n                },\r\n            ])\r\n            setResultsDialogOpen(true)\r\n            setSaveData(true)\r\n            setIsLoaded(false)\r\n            setCharacters([])\r\n        }\r\n    }, [timeLeft, characters, correctCharacters, errorCount, wordsTyped, typedCharacters, gameData])\r\n\r\n    React.useEffect(() => {\r\n        if (saveData && user?.id && !isLoaded) {\r\n            fetch(`https://60205a6546f1e40017803271.mockapi.io/users`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ ...user, gameData: 'test' }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then(\r\n                    () => {\r\n                        setIsLoaded(true)\r\n                        setSaveData(false)\r\n                        setIsSuccessful(true)\r\n                    },\r\n                    (error) => {\r\n                        setIsLoaded(true)\r\n                        setSaveData(false)\r\n                        setError(error)\r\n                    },\r\n                )\r\n        }\r\n    }, [saveData, user, gameData])\r\n\r\n    console.log('error', error)\r\n    console.log('successful', isSuccessful)\r\n\r\n    return (\r\n        <Container>\r\n            <Appbar\r\n                time={timeLeft}\r\n                wordsPerMinute={wordsPerMinute}\r\n                username={user?.username ?? ''}\r\n            />\r\n            <Grid container spacing={2}>\r\n                <View characters={characters} />\r\n                <Grid container item xs={12}>\r\n                    <Grid item xs>\r\n                        <TextField\r\n                            size=\"small\"\r\n                            autoComplete=\"off\"\r\n                            type=\"text\"\r\n                            value={inputValue}\r\n                            label=\"Word\"\r\n                            id=\"wordInput\"\r\n                            variant=\"outlined\"\r\n                            onChange={handleChange}\r\n                            inputRef={inputRef}\r\n                            disabled={inputDisabled}\r\n                            autoFocus\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Button variant=\"contained\" onClick={newGameClick} color=\"primary\">\r\n                            New Game\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <Dialog open={newGameTimer > 0}>\r\n                        <DialogContent>\r\n                            <Typography>{`New Game starts in ${newGameTimer}`}</Typography>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                    <Dialog open={resultsDialogOpen} onClose={handleResultsDialogClose}>\r\n                        <DialogTitle>Results</DialogTitle>\r\n                        <DialogContent>\r\n                            <Typography>\r\n                                Curent Game WPM:\r\n                                {gameData[gameData.length - 1]?.wordsPerMinute?.toFixed(2)}\r\n                            </Typography>\r\n                            <Typography>\r\n                                Current Game Completion:\r\n                                {((gameData[gameData.length - 1]?.completion || 0) * 100).toFixed(\r\n                                    2,\r\n                                )}\r\n                                %\r\n                            </Typography>\r\n                            <Typography>\r\n                                Average WPM:\r\n                                {gameData.reduce(\r\n                                    (total, each) => total + (each?.wordsPerMinute || 0),\r\n                                    0,\r\n                                ) / gameData.length}\r\n                            </Typography>\r\n                            <Typography>Total Games: {gameData.length}</Typography>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleResultsDialogClose} color=\"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Result results={gameData} />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport { Login } from './components/Login'\nimport { Main } from './components/Main'\n\nexport interface User {\n    id: string\n    createdAt: string\n    username: string\n    password: string\n    gameData: any\n}\n\nconst tempUsers: User[] = [\n    {\n        id: '1',\n        createdAt: ' ',\n        username: 'un1',\n        password: 'pw1',\n        gameData: '',\n    },\n]\n\nconst App: React.FC = () => {\n    const [error, setError] = React.useState(null)\n    const [isLoaded, setIsLoaded] = React.useState<boolean>(false)\n    const [users, setUsers] = React.useState<User[]>([])\n    const [user, setUser] = React.useState<User>()\n    const [isLoggedIn, setIsLoggedIn] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        if (users.length === 0) {\n            fetch('https://60205a6546f1e40017803271.mockapi.io/users')\n                .then((res) => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true)\n                        setUsers(result)\n                    },\n                    (error) => {\n                        setIsLoaded(true)\n                        setError(error)\n                    },\n                )\n        }\n    }, [users])\n\n    console.log('error', error)\n    console.log('isLoaded', isLoaded)\n    console.log('users', users)\n\n    return isLoggedIn ? (\n        <Main user={user} />\n    ) : (\n        <Login users={users} setIsLoggedIn={setIsLoggedIn} setUser={setUser} />\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}